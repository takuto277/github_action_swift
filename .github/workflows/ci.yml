# GitHub Actions CI ワークフロー
# このファイルは、プッシュやプルリクエスト時に自動的にビルドとテストを実行します

name: CI

# ワークフローを実行するトリガーを定義
on:
  # main ブランチへのプッシュ時
  push:
    branches: [ main, master ]
  # プルリクエスト作成時
  pull_request:
    branches: [ main, master ]
  # 手動実行を可能にする
  workflow_dispatch:

# 並行実行の制御（同一ブランチで複数実行されないようにする）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ビルドとテストのジョブ
  build-and-test:
    name: Build and Test
    runs-on: macos-15 # 最新のmacOSを使用（Xcode 16対応）
    
    steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. 最新のXcodeを選択
    - name: Select Xcode version
      run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
    
    # 3. Xcodeのバージョンを表示（デバッグ用）
    - name: Show Xcode version
      run: xcodebuild -version
    
    # 4. Swift のバージョンを表示
    - name: Show Swift version
      run: swift --version
    
    # 5. 利用可能なシミュレーターをリスト表示
    - name: List available simulators
      run: xcrun simctl list devicetypes
    
    # 6. プロジェクトスキームをリスト表示
    - name: List schemes
      run: xcodebuild -project github_action_swift.xcodeproj -list
    
    # 7. プロジェクトをビルド（エラーハンドリング改善）
    - name: Build project
      run: |
        set -o pipefail
        xcodebuild \
          -project github_action_swift.xcodeproj \
          -scheme github_action_swift \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Debug \
          -derivedDataPath ./DerivedData \
          build \
          | xcpretty && exit ${PIPESTATUS[0]}
    
    # 8. テストを実行
    - name: Run tests
      run: |
        set -o pipefail
        xcodebuild \
          -project github_action_swift.xcodeproj \
          -scheme github_action_swift \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Debug \
          -derivedDataPath ./DerivedData \
          test \
          | xcpretty && exit ${PIPESTATUS[0]}
    
    # 9. テスト結果をアップロード（失敗時のデバッグ用）
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results
        path: |
          ./DerivedData/Logs/Test/*.xcresult
        retention-days: 5

  # コード品質チェックのジョブ
  code-quality:
    name: Code Quality
    runs-on: macos-15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # SwiftLint を使用してコード品質をチェック
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: swiftlint lint --strict
    
    # SwiftFormat を使用してフォーマットをチェック
    - name: Install SwiftFormat
      run: brew install swiftformat
    
    - name: Check code formatting
      run: swiftformat --lint . --swiftversion 5.9
